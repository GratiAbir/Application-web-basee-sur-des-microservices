package com.example.demo.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.example.demo.EnseignantChercheur;
import com.example.demo.Etudiant;
import com.example.demo.Membre;
import com.example.demo.dao.EnseignantRepository;
import com.example.demo.dao.EtudiantRepository;
import com.example.demo.dao.MembreRepository;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class MembreImpl implements IMembreService {
	MembreRepository membreRepository;
	EtudiantRepository etudiantRepository;
	EnseignantRepository enseignantRepository;
	
	@Override
	public Membre addMember(Membre m) {
		membreRepository.save(m);
		return m;
	}

	@Override
	public void deleteMember(Long id) {
		membreRepository.deleteById(id);

	}

	@Override
	public Membre updateMember(Membre p) {
		return membreRepository.saveAndFlush(p);
	}

	@Override
	public Membre findMember(Long id) {
		return membreRepository.findById(id).get();
		
	}

	@Override
	public List<Membre> findAll() {
		return membreRepository.findAll();
	}

	@Override
	public Membre findByCin(String cin) {
		return membreRepository.findByCin(cin);
	}

	@Override
	public Membre findByEmail(String email) {
		return membreRepository.findByEmail(email);
	}

	@Override
	public List<Membre> findByNom(String nom) {
		return membreRepository.findByNomStartingWith(nom);
	}

	@Override
	public List<Etudiant> findByDiplome(String diplome) {
		return etudiantRepository.findByDiplome(diplome);
	}

	@Override
	public List<EnseignantChercheur> findByGrade(String grade) {
		return enseignantRepository.findByGrade(grade);
	}

	@Override
	public List<EnseignantChercheur> findByEtablissement(String etablissement) {
		return enseignantRepository.findByEtablissement(etablissement);
	}
	
	//affecter un étudiant à un enseignant
	@Override
	public void AffecterEtudiantToEnseignant(Long idEtd, Long idEns) {
		Etudiant etd = etudiantRepository.findById(idEtd).get();
		EnseignantChercheur ens = enseignantRepository.findById(idEns).get();
		
		etudiantRepository.save(etd);
	}
	
	@Override
	public List<Etudiant> ChercherEtdForEns(EnseignantChercheur ens) {
		return etudiantRepository.findByEncadrent(ens);
		
	}

}
